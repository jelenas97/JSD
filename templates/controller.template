package jsd.tim.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.ui.Model;
import java.util.Collection;
import java.util.List;

import jsd.tim.model.{{entity.name}};
import jsd.tim.dto.{{entity.name}}DTO;
import jsd.tim.service.{{entity.name}}Service;

@Controller
@RequestMapping("/{{entity.name|lower}}")
public class {{entity.name}}Controller{

    @Autowired
    private {{entity.name}}Service {{entity.name|lower}}Service;
{% if shared %}
    {% for operationsPart in shared.operationsPart %}
        {% for operation in operationsPart.operations %}
          {% if operation.GET_ALL %}
    @GetMapping
    public String getAll(Model model) {
        initModel(model);
        return "{{entity.name}}ListView";
    }

    {% endif %}
    {% if operation.GET_BY_ID %}
    @GetMapping(value = "/{id}")
    public ResponseEntity<{{entity.name}}> getById(@PathVariable Long id){
        try {
            {{entity.name|capitalize}} {{entity.name|lower}} = {{entity.name|lower}}Service.getById(id);
            return new ResponseEntity<>({{entity.name|lower}});
        }
        catch(Exception e){
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    {% endif %}
    {% if operation.SAVE %}
    @GetMapping(value = "/new")
    public String create(Model model) {
        initModel(model);
        return "{{entity.name}}Form";
    }

    @PostMapping
    public String save(@ModelAttribute {{entity.name}} {{entity.name|lower}}, Model model){
        {{entity.name|lower}}Service.save({{entity.name|lower}});
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% if operation.UPDATE %}
    @GetMapping(value = "/update/{id}")
    public String update(Model model, @PathVariable Long id) {
        setModel(model, id);
        {{entity.name}} {{entity.name|lower}} = {{entity.name|lower}}Service.getById(id);
        {{entity.name|lower}}Service.delete({{entity.name|lower}});
        return "{{entity.name}}UpdateForm";
    }

    @PostMapping(value = "/update")
    public String update(@ModelAttribute {{entity.name}} {{entity.name|lower}}, Model model) {
        {{entity.name|lower}}Service.update({{entity.name|lower}});
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% if operation.DELETE %}
    @GetMapping(value="/delete/{id}")
    public String delete(@PathVariable Long id, Model model) {
        {{entity.name}} {{entity.name|lower}} = {{entity.name|lower}}Service.getById(id);
        {{entity.name|lower}}Service.delete({{entity.name|lower}});
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% endfor %}
    {% endfor %}
{% endif %}
    {% for operationsPart in entity.operationsPart %}
        {% for operation in operationsPart.operations %}
            {% if operation.name == "getAll" %}
    @GetMapping
    public String getAll(Model model) {
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% if operation.name == "getById" %}
    @GetMapping(value = "/{id}")
    public ResponseEntity<{{entity.name}}> getById(@PathVariable Long id){
        try {
            {{entity.name|capitalize}} {{entity.name|lower}} = {{entity.name|lower}}Service.getById(id);
            return new ResponseEntity<>({{entity.name|lower}}, HttpStatus.OK);
    }
    catch(Exception e){
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    {% endif %}
    {% if operation.name == "save" %}
    @GetMapping(value = "/new")
    public String create(Model model) {
        initModel(model);
        return "{{entity.name}}Form";
    }

    @PostMapping
    public String save(@ModelAttribute {{entity.name}} {{entity.name|lower}}, Model model){
        {{entity.name|lower}}Service.save({{entity.name|lower}});
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% if operation.name == "update" %}
    @GetMapping(value = "/update/{id}")
    public String update(Model model, @PathVariable Long id) {
        setModel(model, id);
        {{entity.name}} {{entity.name|lower}} = {{entity.name|lower}}Service.getById(id);
        {{entity.name|lower}}Service.delete({{entity.name|lower}});
        return "{{entity.name}}UpdateForm";
    }

    @PostMapping(value = "/update")
    public String update(@ModelAttribute {{entity.name}} {{entity.name|lower}}) {
        {{entity.name|lower}}Service.update({{entity.name|lower}});
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% if operation.DELETE %}
    @GetMapping(value="/delete/{id}")
    public String delete(@PathVariable Long id, Model model) {
        {{entity.name}} {{entity.name|lower}} = {{entity.name|lower}}Service.getById(id);
        {{entity.name|lower}}Service.delete({{entity.name|lower}});
        initModel(model);
        return "{{entity.name}}View";
    }

    {% endif %}
    {% endfor %}
    {% endfor %}
    private void initModel(Model model) {
        model.addAttribute("{{entity.name|lower}}", new {{entity.name}}DTO());
        model.addAttribute("{{entity.name}}List", {{entity.name|lower}}Service.getAll());
    }

    private void setModel(Model model, Long id) {
        {{entity.name}}DTO toUpdate = new {{entity.name}}DTO();
        toUpdate.setId(id);
        model.addAttribute("{{entity.name|lower}}", toUpdate);
    }
}

